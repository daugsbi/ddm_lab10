package ch.fhnw.ddm.HadoopExercise;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.partition.HashPartitioner;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class MinimalMapReduce extends Configured implements Tool {
	
	final static String inputFile = "res//purchases.txt";
	final static String outputFile = "res//output";
	
	public static void main(String[] args) throws Exception {
	    int res = ToolRunner.run(new MinimalMapReduce(), args);
	    System.exit(res);
	}
	
	@Override
	public int run(String[] args) throws Exception {	
		Job job = Job.getInstance(getConf(), "minimapred");
		job.setJarByClass(this.getClass());
		
		job.setInputFormatClass(TextInputFormat.class);
		job.setMapperClass(MyMapper.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(DoubleWritable.class);
		
		job.setPartitionerClass(HashPartitioner.class);
		
		//job.setNumReduceTasks(0);
		job.setReducerClass(MyReducer.class);
		
		job.setOutputKeyClass(LongWritable.class);
		job.setOutputValueClass(Text.class);
		
		job.setOutputFormatClass(TextOutputFormat.class);
		
	    FileInputFormat.addInputPath(job, new Path(inputFile));
	    FileOutputFormat.setOutputPath(job, new Path(outputFile));
	    return job.waitForCompletion(true) ? 0 : 1;
	}
	
	public static class MyMapper extends Mapper<LongWritable, Text, Text, DoubleWritable> {
		final static int indexCategory = 3;
		final static int indexAmount = 4;
		
		private Text category = new Text();
		private DoubleWritable amount = new DoubleWritable();
		
		@Override
		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			String line = value.toString();			
			String[] values = line.split("\\t");
			
			if (values.length > indexCategory && values.length > indexAmount) {				
				try {
					category.set(values[indexCategory]);
					amount.set(Double.parseDouble(values[indexAmount]));	
					
					context.write(category, amount);
				} catch (NumberFormatException e) {
					// don't write
				}	
			}
		}
	}

	public static class MyReducer extends Reducer<Text, DoubleWritable, Text, DoubleWritable> {
		@Override
		public void reduce(Text key, Iterable<DoubleWritable> values, Context context) throws IOException, InterruptedException {
			double sum = 0;
			
			for (DoubleWritable val : values) {
				sum += val.get();
			}
			
			context.write(key, new DoubleWritable(sum));
		}
	}
}