package ch.fhnw.ddm.HadoopExercise.Dictionary;

import java.io.File;

import org.apache.commons.io.FileUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class Dictionary extends Configured implements Tool {
	
	final static String[] inputFiles = { "res//French.txt", "res//German.txt", "res//Italian.txt" };
	final static String outputPath = "res//dictionary_output";
	
	public static void main(String[] args) throws Exception {
	    int res = ToolRunner.run(new Dictionary(), args);
	    System.exit(res);
	}
	
	@Override
	public int run(String[] args) throws Exception {
		Configuration conf = getConf();
		conf.set("mapreduce.input.keyvaluelinerecordreader.key.value.separator", "\t");

		Job job = Job.getInstance(conf, "mapreducedictionary");
		
		job.setJarByClass(this.getClass());
		
		job.setInputFormatClass(KeyValueTextInputFormat.class);
		job.setMapperClass(DictionaryMapper.class);
		
		job.setReducerClass(DictionaryReducer.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		
		for (String file : inputFiles) {
			FileInputFormat.addInputPath(job, new Path(file));	
		}

		FileUtils.deleteDirectory(new File(outputPath)); 

		FileOutputFormat.setOutputPath(job, new Path(outputPath));
		
	    return job.waitForCompletion(true) ? 0 : 1;
	}
}